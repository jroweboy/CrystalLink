vertexShader
attribute vec4 a_position;
attribute vec4 + ShaderProgram.COLOR_ATTRIBUTE;
attribute vec2 + ShaderProgram.TEXCOORD_ATTRIBUTE + 0;
uniform mat4 u_projTrans;
varying vec4 v_color;
varying vec2 v_texCoords;

void main()
{
   v_color = " + ShaderProgram.COLOR_ATTRIBUTE;
   v_color.a = v_color.a * (256.0/255.0);
   v_texCoords = " + ShaderProgram.TEXCOORD_ATTRIBUTE;
   gl_Position =  u_projTrans * " + ShaderProgram.POSITION_ATTRIBUTE;
}


String fragmentShader = #ifdef GL_ES
#define LOWP lowp
precision mediump float;
#else
#define LOWP
#endif
varying LOWP vec4 v_color;
varying vec2 v_texCoords;
uniform sampler2D u_texture;

void main()
{
  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n" //
}